rnorm(1000, 23, 5)
rnorm(1000, 23, 20)
my_data <- rnorm(1000, 23, 20)
plot(my_data)
boxplot(my_data)
plot(my_data)
my_data2 <- rnorm(1000, 23, 20)
boxplot(my_data, my_data2)
scatter(my_data, my_data2)
?plot
lm(my_data, y ~ x)
lm(my_data,formula =  y ~ x)
?plot
plot(x = my_data, y = my_data2)
my_data2 <- rnorm(1000, 23, 5)
plot(x = my_data, y = my_data2)
plot(my_data2)
my_data2 <- rnorm(1000, 2, 5)
plot(my_data2)
data(phones)
library(MASS)
data(phones)
phones
oats
women
men
attitude
cars
head(cars)
cars[1"10"]
cars[1:10]
cars[1:10,]
datasets
esoph[1:10,]
JohnsonJohnson[1:10,]
JohnsonJohnson
JohnsonJohnson[1:10,]
JohnsonJohnson[1:5,]
JohnsonJohnson
JohnsonJohnson[1:1964,]
JohnsonJohnson[1960:1964,]
uspop
volcano
head(volcano)
warpbreaks
WWWusage
require(graphics)
work <- diff(WWWusage)
par(mfrow = c(2, 1)); plot(WWWusage); plot(work)
## Not run:
require(stats)
aics <- matrix(, 6, 6, dimnames = list(p = 0:5, q = 0:5))
for(q in 1:5) aics[1, 1+q] <- arima(WWWusage, c(0, 1, q),
optim.control = list(maxit = 500))$aic
for(p in 1:5)
for(q in 0:5) aics[1+p, 1+q] <- arima(WWWusage, c(p, 1, q),
optim.control = list(maxit = 500))$aic
round(aics - min(aics, na.rm = TRUE), 2)
## End(Not run)
## Not run:
require(graphics)
plot(airmiles, main = "airmiles data",
xlab = "Passenger-miles flown by U.S. commercial airlines", col = 4)
airmiles
str(airmiles)
require(graphics)
plot(discoveries, ylab = "Number of important discoveries",
las = 1)
title(main = "discoveries data set")
require(graphics)
plot(discoveries, ylab = "Number of important discoveries",
las = 1)
title(main = "discoveries data set")
discoveries
discoveries[1:2,]
discoveries[,1:10]
str(discoveries)
count.fields(discoveries)
library("crayon", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("formatR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
require(graphics)
plot(discoveries, ylab = "Number of important discoveries",
las = 1)
title(main = "discoveries data set")
plot(discoveries)
require(graphics)
plot(discoveries, ylab = "Number of important discoveries",
las = 1)
title(main = "discoveries data set")
plot(women)
?data.frame
install.packages(rattle)
install.packages(caret)
attach(weather)
data
data(weather)
data()
install.packages("caret")
install.packages("rattle")
crs
rattle
rattle(csvname=NULL, dataset=NULL, useGtkBuilder=NULL)
rivers
summary(rivers)
stats.desc(rivers)
install.packages("pastecs")
library("pastecs", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
stats.desc(rivers)
stat.desc(rivers)
install.packages("Hmisc")
library(Hmisc)
describe(rivers)
View(rivers)
describe(quakes)
head(quakes)
describe(npk)
?which
head(quakes)
mydata = quakes[quakes$mag]
mydata = quakes[quakes$mag, ]
mydata
mydata = quakes[,quakes$mag]
mydata = quakes[which(quakes$mag == 4.0),]
mydata
describe(mydata)
teering
treering
head(treering)
trees
head(trees)
cor(trees)
corr(trees)
state.name
sunspots
describe(sunspots)
swiss
?rnorm
rnorm(150)
mydata = rnorm(150)
plot(mydata)
airquality
gooddata = complete.cases(airquality)
head(airquality[good,])
head(airquality[gooddata, ])
gooddata
summary(gooddata)
airquality[good,]
airquality[gooddata,]
View(gooddata)
View(airquality[gooddata,])
describe(airquality[gooddata,])
describe(airquality[gooddata,]$Temp)
data(airquality)
describe(airquality)
gooddata -> complete.cases(airquality)
gooddata <- complete.cases(airquality)
newdata <- airquality[gooddata,]
describe(newdata)
newdata
detach("package:Hmisc", unload=TRUE)
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(pdfLatex)
install.packages(pdflatex)
install.packages("pdflatex")
require(graphics)
## Annette Dobson (1990) "An Introduction to Generalized Linear Models".
## Page 9: Plant Weight Data.
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
summary(lm.D90)
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(lm.D9, las = 1)      # Residuals, Fitted, ...
par(opar)
### less simple examples in "See Also" above
library(compare)
install.packages("compare")
library(compare)
> a1 <- data.frame(a = 1:5, b = letters[1:5])
> a2 <- data.frame(a = 1:3, b = letters[1:3])
> comparison <- compare(a1,a2,allowAll=TRUE)
> comparison$tM
library(compare)
> a1 <- data.frame(a = 1:5, b = letters[1:5])
> a2 <- data.frame(a = 1:3, b = letters[1:3])
library(compare)
> a1 <- data.frame(a = 1:5, b = letters[1:5])
> a2 <- data.frame(a = 1:3, b = letters[1:3])
> a1 <- data.frame(a = 1:5, b = letters[1:5])
> a1 <- data.frame(a = 1:5, b = letters[1:5])
data.frame(a = 1:5)
data.frame(a = 1:5, b = letters[1:5])
x <- data.frame(a = 1:5, b = letters[1:5])
x
library(compare)
a1 <- data.frame(a = 1:5, b = letters[1:5])
a2 <- data.frame(a = 1:3, b = letters[1:3])
comparison <- compare(a1,a2,allowAll=TRUE)
comparison$tM
a1
a2
library(compare)
a1 <- data.frame(a = 1:5, b = letters[1:5])
a2 <- data.frame(a = 1:3, b = letters[1:3])
comparison <- compare(a1,a2,allowAll=0)
comparison$tM
library(compare)
a1 <- data.frame(a = 1:5, b = letters[1:5])
a2 <- data.frame(a = 1:3, b = letters[1:3])
comparison <- compare(a1,a2,allowAll=TRUE)
comparison$tM
?compare
library(compare)
obj1 <- c("a","b","c")
obj2 <- factor(obj1)
compare(obj1, obj2, allowAll = TRUE)
library(compare)
obj1 <- c("a","b","c")
obj2 <- c(factor(obj1), "d"
compare(obj1, obj2, allowAll = TRUE)
library(compare)
obj1 <- c("a","b","c")
obj2 <- c(factor(obj1), "d")
compare(obj1, obj2, allowAll = TRUE)
library(compare)
obj1 <- c("a","b","c")
obj2 <- c("a", "c", "f")
compare(obj1, obj2, allowAll = TRUE)
library(compare)
obj1 <- c("a","b","c")
obj2 <- c("a", "c", "f")
compare(obj1, obj2, allowAll = TRUE)
paste(obj1, obj2, sep = " ")
library(compare)
obj1 <- c("a","b","c")
obj2 <- c("a", "c", "f")
compare(obj1, obj2, allowAll = TRUE)
paste(obj1, obj2, sep = "")
library(data.tables)
install.packages("data.table")
tData[tBounce, Bounced := 1L]
library(data.table)
keys <- c("Email", "Campaign")
tData <- data.table(testData, key=keys)
tBounce <- data.table(testBounce, key=keys)
tData[tBounce, Bounced := 1L]
?"data.table"
DT = data.table(x=c("b","b","b","a","a"),v=rnorm(5))
dt
DT
CARS = data.table(cars)
head(CARS)
tables()
setwd("~/Dropbox (Personal)/Coursera-DataScience/R Programming/Week 4")
getwd()
setwd("~/Dropbox (Personal)/Coursera-DataScience/R Programming/Week 4")
# Programming Assignment 3: Hospital Quality **Please Note: No Grace Period**
# Grading script: source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
# at the console prompt (after source-ing the file). NOTE that the submit script requires that you be connected to the Internet in order to work properly. When you execute the submit script in R, you will see the following menu (after typing in your submission login email and password):
# [1] 'best' part 1
# [2] 'best' part 2
# [3] 'best' part 3
# FINDING THE BEST HOSPITAL IN THE STATE
# Write a function called best that take two arguments: the 2-character abbreviated
# name of a state and an outcome name. The function reads the outcome-of-care-measures.csv
# file and returns a character vector with the name of the hospital that has the best (i.e. lowest)
# 30-day mortality for the specified outcome in that state. The hospital name is the name
# provided in the Hospital.Name variable. The outcomes can be one of “heart attack”, “heart
# failure”, or “pneumonia”. Hospitals that do not have data on a particular outcome should be
# excluded from the set of hospitals when deciding the rankings.
# Handling ties. If there is a tie for the best hospital for a given outcome, then the
# hospital names should be sorted in alphabetical order and the first hospital in that set
# should be chosen (i.e. if hospitals “b”, “c”, and “f” are tied for best, then hospital “b”
# should be returned). The function should use the following template.
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
==================
# Programming Assignment 3: Hospital Quality **Please Note: No Grace Period**
# Grading script: source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
# at the console prompt (after source-ing the file). NOTE that the submit script requires that you
# be connected to the Internet in order to work properly.
# FINDING THE BEST HOSPITAL IN THE STATE
# Write a function called best that take two arguments: the 2-character abbreviated
# name of a state and an outcome name. The function reads the outcome-of-care-measures.csv
# file and returns a character vector with the name of the hospital that has the best (i.e. lowest)
# 30-day mortality for the specified outcome in that state. The hospital name is the name
# provided in the Hospital.Name variable. The outcomes can be one of “heart attack”, “heart
# failure”, or “pneumonia”. Hospitals that do not have data on a particular outcome should be
# excluded from the set of hospitals when deciding the rankings.
# Handling ties. If there is a tie for the best hospital for a given outcome, then the
# hospital names should be sorted in alphabetical order and the first hospital in that set
# should be chosen (i.e. if hospitals “b”, “c”, and “f” are tied for best, then hospital “b”
# should be returned). The function should use the following template.
# ==================================================================================================
setwd("~/Dropbox (Personal)/Coursera-DataScience/R Programming/Week 4")
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
setwd("~/Dropbox (Personal)/Coursera-DataScience/R Programming/Week 4/rprog-data-ProgAssignment3-data")
setwd("~/Dropbox (Personal)/Coursera-DataScience/R Programming/Week 4/rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[, 11] <- as numeric(outcome[, 11])
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[,11])
outcome[,11]
head(outcome[,11])
plot(outcome[,11])
View(newdata)
setwd("~/Dropbox (Personal)/Coursera-DataScience/R Programming/Week 4/ProgrammingAssignment3")
o_data <- read.csv("outcome-of-care-measures.csv" colClasses = "character")
o_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(o_data)
setwd("~/Dropbox (Personal)/Programming/PopeFrancisSpeech")
speechtxt <- readlines("PopeFrancis-CongressSpeech-09-14-2015")
speechtxt <- readlines("PopeFrancis-CongressSpeech-09-14-2015.txt")
library(readlines)
install.packages("readlines")
?scan
speechtxt <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt")
speechtxt <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt", what=character() ) )
speechtxt <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt", what=character())
head(speechtxt)
speechtxt
View(speechtxt)
speechtxt <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt", what=character(), comment.char = ".")
speechtxt
speechtxt <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt", what=character())
speechtxt
speechtxt <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt", what=character())
speechtxt
speechtxt <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt", what=character())
speechtxt
table(speechtxt)
table(speechtxt)
sapply(speechtxt, table)
sapply(speechtxt)
as.matrix(speechtxt)
speechtxtmat <- as.matrix(speechtxt)
table(xpeechtxtmat)
speechtxtmat
speechtxtmat <- as.matrix(speechtxt)
table(speechtxtmat)
counts <- table(speechtxtmat)
barplot(counts[which(counts >0)])
barplot(counts[which(counts >10)])
barplot(counts[which(counts >50)])
Library(tm)
install.packages("tm")
Library(tm)
Library("tm")
library(tm)
corpus <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt", what=character())
corpus <- tm_map(corpus, removePunctuation)
corpus <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt", what=string())
corpus <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt")
?scan
corpus <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt", what = raw)
corpus <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt", what = "raw")
corpus <- tm_map(corpus, removePunctuation)
corpus
tm_map(corpus, removePunctuation)
str(corpus)
summary(corpus)
?tm_map
txt <- Corpus(corpus)
txt <- Corpus(rawtxt)
rawtxt <- scan("PopeFrancis-CongressSpeech-09-14-2015.txt", what = "raw")
txt <- Corpus(rawtxt)
txt <- Corpus(DirSource("PopeFrancis-CongressSpeech-09-14-2015.txt"))
txt <- Corpus(DirSource("~/Users/Dropbox (Personal)/Programming/PopeFrancisSpeech"))
txt <- Corpus(DirSource("~/Users/Desktop"))
txt <- Corpus(DirSource("~/Users/Desktop/PopeFrancis-CongressSpeech-09-14-2015.txt"))
txt <- Corpus(DirSource("~/Dropbox (Personal)/PopeFrancisSpeech"))
install.packages("tm")
library(tm)
txt <- Corpus(DirSource("~/Dropbox (Personal)/PopeFrancisSpeech"))
txt <- Corpus(DirSource("/Users/wmcraver/Dropbox (Personal)/PopeFrancisSpeech"))
setwd("~/Dropbox (Personal)/Programming/PopeFrancisSpeech")
getwd()
txt <- Corpus(DirSource("/Users/wmcraver/Dropbox (Personal)/PopeFrancisSpeech"))
txt <- Corpus(DirSource("~Dropbox (Personal)/PopeFrancisSpeech"))
txt <- Corpus(DirSource("~Dropbox (Personal)/PopeFrancisSpeech"))
txt <- Corpus(DirSource("~Dropbox (Personal)/PopeFrancisSpeech", readerControl = list(reader=readPlain))
txt <- Corpus(DirSource("~Dropbox (Personal)/PopeFrancisSpeech", readerControl = list(reader=readPlain)))
?tm
??tm
library(tm)
?corpus
?Corpus
?DirSource
txt <- Corpus(DirSource("~/Dropbox (Personal)/PopeFrancisSpeech", readerControl = list(reader=readPlain)))
txt <- Corpus(DirSource("~/")
txt <- Corpus(DirSource("/Users/wmcraver")
txt <- Corpus(DirSource("/Users/wmcraver"))
txt
txt <- Corpus(DirSource("/Users/wmcraver"))
txt <- Corpus(DirSource("~/Users/wmcraver"))
txt <- Corpus(DirSource("Users/wmcraver"))
?tm
??tm
install.packages("tm")
install.packages("tm")
library(tm)
txt <- Corpus(DirSource("Users/wmcraver"))
setwd("~/Dropbox (Personal)/Programming/PopeFrancisSpeech")
getwd()
txt <- Corpus(DirSource("Users/wmcraver"))
?VCorpus
txt <- VCorpus(DirSource("Users/wmcraver"), readerControl = list(reader=readPlain()))
txt <- VCorpus(DirSource("Users/wmcraver/"), readerControl = list(reader=readPlain()))
txt <- VCorpus(DirSource("~/Dropbox (Personal)/Programming/PopeFrancisSpeech"), readerControl = list(reader=readPlain()))
txt <- VCorpus(DirSource("~/Dropbox (Personal)/Programming/PopeFrancisSpeech"), readerControl = list(reader=readPlain)
txt <- VCorpus(DirSource("~/Dropbox (Personal)/Programming/PopeFrancisSpeech"), readerControl = list(reader=readPlain))
txt <- VCorpus(DirSource("~/Dropbox (Personal)/Programming/PopeFrancisSpeech"), readerControl = list(reader=readPlain(txt)))
setwd("~/Dropbox (Personal)/Programming/PopeFrancisSpeech")
?MakeWordBar
??MakeWordBar
?InitializeText
??InitializeText
Programming
setwd("~/Dropbox (Personal)/Programming/PopeFrancisSpeech")
x <- read.csv("PopeFrancis-CongressSpeech-09-14-2015.txt")
?scan
scan("PopeFrancis-CongressSpeech-09-14-2015.txt")
x <- read.csv("PopeFrancis.csv")
View(x)
install.packages("tm")
library(tm)
setwd("~/Dropbox (Personal)/Programming/PopeFrancisSpeech")
getwd()
speechtext <- read.csv("PopeFrancis.csv")
install.packages("tm")
library(tm)
setwd("~/Dropbox (Personal)/Programming/PopeFrancisSpeech")
getwd()
speechtext <- read.csv("PopeFrancis.csv")
head(speechtext)
speechtext.collapsed <- paste(speechtext, collapse = " ")
head(speechtext.collapsed)
head(speechtext)
View(speechtext)
head(speechtext$Text.collapsed)
speechtext.collapsed <- paste(speechtext$Text, collapse = " ")
head(speechtext.collapsed)
speechtext <- read.csv("PopeFrancis.csv" stringsAsFactors = FALSE)
speechtext.collapsed <- paste(speechtext$Text, collapse = " ")
speechsource <- VectorSource(speechtext.collapsed)
speechtext <- read.csv("PopeFrancis.csv", stringsAsFactors = FALSE)
# Collapse all rows into one
speechtext.collapsed <- paste(speechtext$Text, collapse = " ")
#set up source and corpus
speechsource <- VectorSource(speechtext.collapsed)
corpus <- Corpus(speechsource)
corpus <- tm_map(corpus, content_transformer(tolower))
for
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(tolower))
speechtext <- read.csv("PopeFrancis.csv", stringsAsFactors = FALSE, encoding = "ANSI")
# Collapse all rows into one
speechtext.collapsed <- paste(speechtext$Text, collapse = " ")
#set up source and corpus
speechsource <- VectorSource(speechtext.collapsed)
corpus <- Corpus(speechsource)
#clean the data
corpus <- tm_map(corpus, content_transformer(tolower))
View(corpus)
View(speechsource)
speechtext <- read.csv("PopeFrancis.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
# Collapse all rows into one
speechtext.collapsed <- paste(speechtext$Text, collapse = " ")
#set up source and corpus
speechsource <- VectorSource(speechtext.collapsed)
corpus <- Corpus(speechsource)
#clean the data
corpus <- tm_map(corpus, content_transformer(tolower))
speechtext <- read.csv("PopeFrancis.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
# Collapse all rows into one
speechtext.collapsed <- paste(speechtext$Text, collapse = " ")
#set up source and corpus
speechsource <- VectorSource(speechtext.collapsed)
corpus <- Corpus(speechsource)
#clean the data
corpus <- tm_map(corpus, content_transformer(tolower))
speechtext <- read.csv("PopeFrancis.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
# Collapse all rows into one
speechtext.collapsed <- paste(speechtext$Text, collapse = " ")
#set up source and corpus
speechsource <- VectorSource(speechtext.collapsed)
corpus <- Corpus(speechsource)
#clean the data
corpus <- tm_map(corpus, content_transformer(tolower))
speechtext <- read.csv("PopeFrancis2.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
# Collapse all rows into one
speechtext.collapsed <- paste(speechtext$Text, collapse = " ")
#set up source and corpus
speechsource <- VectorSource(speechtext.collapsed)
corpus <- Corpus(speechsource)
#clean the data
corpus <- tm_map(corpus, content_transformer(tolower))
